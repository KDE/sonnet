import QtQuick.tooling 1.2

// This file describes the plugin-supplied types contained in the library.
// It is used for QML tooling purposes only.
//
// This file was auto-generated by:
// 'qmlplugindump org.kde.sonnet 1.0'

Module {
    dependencies: ["QtQuick 2.0"]
    Component {
        name: "QAbstractItemModel"
        prototype: "QObject"
        Enum {
            name: "LayoutChangeHint"
            values: {
                "NoLayoutChangeHint": 0,
                "VerticalSortHint": 1,
                "HorizontalSortHint": 2
            }
        }
        Enum {
            name: "CheckIndexOption"
            values: {
                "NoOption": 0,
                "IndexIsValid": 1,
                "DoNotUseParent": 2,
                "ParentIsInvalid": 4
            }
        }
        Signal {
            name: "dataChanged"
            Parameter { name: "topLeft"; type: "QModelIndex" }
            Parameter { name: "bottomRight"; type: "QModelIndex" }
            Parameter { name: "roles"; type: "QVector<int>" }
        }
        Signal {
            name: "dataChanged"
            Parameter { name: "topLeft"; type: "QModelIndex" }
            Parameter { name: "bottomRight"; type: "QModelIndex" }
        }
        Signal {
            name: "headerDataChanged"
            Parameter { name: "orientation"; type: "Qt::Orientation" }
            Parameter { name: "first"; type: "int" }
            Parameter { name: "last"; type: "int" }
        }
        Signal {
            name: "layoutChanged"
            Parameter { name: "parents"; type: "QList<QPersistentModelIndex>" }
            Parameter { name: "hint"; type: "QAbstractItemModel::LayoutChangeHint" }
        }
        Signal {
            name: "layoutChanged"
            Parameter { name: "parents"; type: "QList<QPersistentModelIndex>" }
        }
        Signal { name: "layoutChanged" }
        Signal {
            name: "layoutAboutToBeChanged"
            Parameter { name: "parents"; type: "QList<QPersistentModelIndex>" }
            Parameter { name: "hint"; type: "QAbstractItemModel::LayoutChangeHint" }
        }
        Signal {
            name: "layoutAboutToBeChanged"
            Parameter { name: "parents"; type: "QList<QPersistentModelIndex>" }
        }
        Signal { name: "layoutAboutToBeChanged" }
        Signal {
            name: "rowsAboutToBeInserted"
            Parameter { name: "parent"; type: "QModelIndex" }
            Parameter { name: "first"; type: "int" }
            Parameter { name: "last"; type: "int" }
        }
        Signal {
            name: "rowsInserted"
            Parameter { name: "parent"; type: "QModelIndex" }
            Parameter { name: "first"; type: "int" }
            Parameter { name: "last"; type: "int" }
        }
        Signal {
            name: "rowsAboutToBeRemoved"
            Parameter { name: "parent"; type: "QModelIndex" }
            Parameter { name: "first"; type: "int" }
            Parameter { name: "last"; type: "int" }
        }
        Signal {
            name: "rowsRemoved"
            Parameter { name: "parent"; type: "QModelIndex" }
            Parameter { name: "first"; type: "int" }
            Parameter { name: "last"; type: "int" }
        }
        Signal {
            name: "columnsAboutToBeInserted"
            Parameter { name: "parent"; type: "QModelIndex" }
            Parameter { name: "first"; type: "int" }
            Parameter { name: "last"; type: "int" }
        }
        Signal {
            name: "columnsInserted"
            Parameter { name: "parent"; type: "QModelIndex" }
            Parameter { name: "first"; type: "int" }
            Parameter { name: "last"; type: "int" }
        }
        Signal {
            name: "columnsAboutToBeRemoved"
            Parameter { name: "parent"; type: "QModelIndex" }
            Parameter { name: "first"; type: "int" }
            Parameter { name: "last"; type: "int" }
        }
        Signal {
            name: "columnsRemoved"
            Parameter { name: "parent"; type: "QModelIndex" }
            Parameter { name: "first"; type: "int" }
            Parameter { name: "last"; type: "int" }
        }
        Signal { name: "modelAboutToBeReset" }
        Signal { name: "modelReset" }
        Signal {
            name: "rowsAboutToBeMoved"
            Parameter { name: "sourceParent"; type: "QModelIndex" }
            Parameter { name: "sourceStart"; type: "int" }
            Parameter { name: "sourceEnd"; type: "int" }
            Parameter { name: "destinationParent"; type: "QModelIndex" }
            Parameter { name: "destinationRow"; type: "int" }
        }
        Signal {
            name: "rowsMoved"
            Parameter { name: "parent"; type: "QModelIndex" }
            Parameter { name: "start"; type: "int" }
            Parameter { name: "end"; type: "int" }
            Parameter { name: "destination"; type: "QModelIndex" }
            Parameter { name: "row"; type: "int" }
        }
        Signal {
            name: "columnsAboutToBeMoved"
            Parameter { name: "sourceParent"; type: "QModelIndex" }
            Parameter { name: "sourceStart"; type: "int" }
            Parameter { name: "sourceEnd"; type: "int" }
            Parameter { name: "destinationParent"; type: "QModelIndex" }
            Parameter { name: "destinationColumn"; type: "int" }
        }
        Signal {
            name: "columnsMoved"
            Parameter { name: "parent"; type: "QModelIndex" }
            Parameter { name: "start"; type: "int" }
            Parameter { name: "end"; type: "int" }
            Parameter { name: "destination"; type: "QModelIndex" }
            Parameter { name: "column"; type: "int" }
        }
        Method { name: "submit"; type: "bool" }
        Method { name: "revert" }
        Method {
            name: "hasIndex"
            type: "bool"
            Parameter { name: "row"; type: "int" }
            Parameter { name: "column"; type: "int" }
            Parameter { name: "parent"; type: "QModelIndex" }
        }
        Method {
            name: "hasIndex"
            type: "bool"
            Parameter { name: "row"; type: "int" }
            Parameter { name: "column"; type: "int" }
        }
        Method {
            name: "index"
            type: "QModelIndex"
            Parameter { name: "row"; type: "int" }
            Parameter { name: "column"; type: "int" }
            Parameter { name: "parent"; type: "QModelIndex" }
        }
        Method {
            name: "index"
            type: "QModelIndex"
            Parameter { name: "row"; type: "int" }
            Parameter { name: "column"; type: "int" }
        }
        Method {
            name: "parent"
            type: "QModelIndex"
            Parameter { name: "child"; type: "QModelIndex" }
        }
        Method {
            name: "sibling"
            type: "QModelIndex"
            Parameter { name: "row"; type: "int" }
            Parameter { name: "column"; type: "int" }
            Parameter { name: "idx"; type: "QModelIndex" }
        }
        Method {
            name: "rowCount"
            type: "int"
            Parameter { name: "parent"; type: "QModelIndex" }
        }
        Method { name: "rowCount"; type: "int" }
        Method {
            name: "columnCount"
            type: "int"
            Parameter { name: "parent"; type: "QModelIndex" }
        }
        Method { name: "columnCount"; type: "int" }
        Method {
            name: "hasChildren"
            type: "bool"
            Parameter { name: "parent"; type: "QModelIndex" }
        }
        Method { name: "hasChildren"; type: "bool" }
        Method {
            name: "data"
            type: "QVariant"
            Parameter { name: "index"; type: "QModelIndex" }
            Parameter { name: "role"; type: "int" }
        }
        Method {
            name: "data"
            type: "QVariant"
            Parameter { name: "index"; type: "QModelIndex" }
        }
        Method {
            name: "setData"
            type: "bool"
            Parameter { name: "index"; type: "QModelIndex" }
            Parameter { name: "value"; type: "QVariant" }
            Parameter { name: "role"; type: "int" }
        }
        Method {
            name: "setData"
            type: "bool"
            Parameter { name: "index"; type: "QModelIndex" }
            Parameter { name: "value"; type: "QVariant" }
        }
        Method {
            name: "headerData"
            type: "QVariant"
            Parameter { name: "section"; type: "int" }
            Parameter { name: "orientation"; type: "Qt::Orientation" }
            Parameter { name: "role"; type: "int" }
        }
        Method {
            name: "headerData"
            type: "QVariant"
            Parameter { name: "section"; type: "int" }
            Parameter { name: "orientation"; type: "Qt::Orientation" }
        }
        Method {
            name: "fetchMore"
            Parameter { name: "parent"; type: "QModelIndex" }
        }
        Method {
            name: "canFetchMore"
            type: "bool"
            Parameter { name: "parent"; type: "QModelIndex" }
        }
        Method {
            name: "flags"
            type: "Qt::ItemFlags"
            Parameter { name: "index"; type: "QModelIndex" }
        }
        Method {
            name: "match"
            type: "QModelIndexList"
            Parameter { name: "start"; type: "QModelIndex" }
            Parameter { name: "role"; type: "int" }
            Parameter { name: "value"; type: "QVariant" }
            Parameter { name: "hits"; type: "int" }
            Parameter { name: "flags"; type: "Qt::MatchFlags" }
        }
        Method {
            name: "match"
            type: "QModelIndexList"
            Parameter { name: "start"; type: "QModelIndex" }
            Parameter { name: "role"; type: "int" }
            Parameter { name: "value"; type: "QVariant" }
            Parameter { name: "hits"; type: "int" }
        }
        Method {
            name: "match"
            type: "QModelIndexList"
            Parameter { name: "start"; type: "QModelIndex" }
            Parameter { name: "role"; type: "int" }
            Parameter { name: "value"; type: "QVariant" }
        }
    }
    Component { name: "QAbstractListModel"; prototype: "QAbstractItemModel" }
    Component {
        name: "QSyntaxHighlighter"
        prototype: "QObject"
        Method { name: "rehighlight" }
        Method {
            name: "rehighlightBlock"
            Parameter { name: "block"; type: "QTextBlock" }
        }
    }
    Component { name: "Sonnet::DictionaryModel"; prototype: "QAbstractListModel" }
    Component {
        name: "Sonnet::Settings"
        prototype: "QObject"
        exports: ["Settings 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "skipUppercase"; type: "bool" }
        Property { name: "autodetectLanguage"; type: "bool" }
        Property { name: "backgroundCheckerEnabled"; type: "bool" }
        Property { name: "checkerEnabledByDefault"; type: "bool" }
        Property { name: "skipRunTogether"; type: "bool" }
        Property { name: "currentIgnoreList"; type: "QStringList" }
        Property { name: "preferredLanguages"; type: "QStringList" }
        Property { name: "defaultLanguage"; type: "string" }
        Property { name: "dictionaryModel"; type: "QObject"; isReadonly: true; isPointer: true }
        Property { name: "modified"; type: "bool"; isReadonly: true }
        Signal { name: "defaultClientChanged" }
        Method { name: "save" }
    }
    Component {
        name: "SpellcheckHighlighter"
        prototype: "QSyntaxHighlighter"
        exports: ["SpellcheckHighlighter 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "document"; type: "QQuickTextDocument"; isPointer: true }
        Property { name: "cursorPosition"; type: "int" }
        Property { name: "selectionStart"; type: "int" }
        Property { name: "selectionEnd"; type: "int" }
        Property { name: "wordIsMisspelled"; type: "bool"; isReadonly: true }
        Property { name: "wordUnderMouse"; type: "string"; isReadonly: true }
        Property { name: "misspelledColor"; type: "QColor" }
        Property { name: "currentLanguage"; type: "string"; isReadonly: true }
        Property { name: "spellCheckerFound"; type: "bool"; isReadonly: true }
        Property { name: "active"; type: "bool" }
        Property { name: "automatic"; type: "bool" }
        Property { name: "autoDetectLanguageDisabled"; type: "bool" }
        Signal {
            name: "changeCursorPosition"
            Parameter { name: "start"; type: "int" }
            Parameter { name: "end"; type: "int" }
        }
        Signal {
            name: "activeChanged"
            Parameter { name: "description"; type: "string" }
        }
        Method {
            name: "setCurrentLanguage"
            Parameter { name: "language"; type: "string" }
        }
        Method { name: "slotAutoDetection" }
        Method { name: "slotRehighlight" }
        Method {
            name: "suggestions"
            type: "QStringList"
            Parameter { name: "position"; type: "int" }
            Parameter { name: "max"; type: "int" }
        }
        Method {
            name: "suggestions"
            type: "QStringList"
            Parameter { name: "position"; type: "int" }
        }
        Method {
            name: "ignoreWord"
            Parameter { name: "word"; type: "string" }
        }
        Method {
            name: "addWordToDictionary"
            Parameter { name: "word"; type: "string" }
        }
        Method {
            name: "replaceWord"
            Parameter { name: "word"; type: "string" }
        }
        Method {
            name: "isWordMisspelled"
            type: "bool"
            Parameter { name: "word"; type: "string" }
        }
    }
    Component {
        prototype: "QQuickPage"
        name: "ConfigPage 1.0"
        exports: ["ConfigPage 1.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "contentData"
        Property { name: "instantApply"; type: "bool" }
        Property { name: "wideMode"; type: "bool" }
        Signal { name: "close" }
        Method {
            name: "onBackRequested"
            type: "QVariant"
            Parameter { name: "event"; type: "QVariant" }
        }
        Property { name: "flickable"; type: "QQuickFlickable"; isPointer: true }
        Property { name: "isCurrentPage"; type: "bool"; isReadonly: true }
        Property { name: "icon"; type: "ActionIconGroup_QMLTYPE_5"; isPointer: true }
        Property { name: "needsAttention"; type: "bool" }
        Property { name: "progress"; type: "QVariant" }
        Property { name: "titleDelegate"; type: "QQmlComponent"; isPointer: true }
        Property { name: "globalToolBarItem"; type: "QQuickItem"; isReadonly: true; isPointer: true }
        Property { name: "globalToolBarStyle"; type: "int" }
        Property { name: "contextualActions"; type: "QObject"; isList: true; isReadonly: true }
        Property { name: "mainAction"; type: "QObject"; isPointer: true }
        Property { name: "leftAction"; type: "QObject"; isPointer: true }
        Property { name: "rightAction"; type: "QObject"; isPointer: true }
        Property {
            name: "actions"
            type: "PageActionPropertyGroup_QMLTYPE_4"
            isReadonly: true
            isPointer: true
        }
        Property { name: "overlay"; type: "QQuickItem"; isReadonly: true; isPointer: true }
        Signal { name: "contextualActionsAboutToShow" }
        Signal {
            name: "backRequested"
            Parameter { name: "event"; type: "QVariant" }
        }
    }
}
